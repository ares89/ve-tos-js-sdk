import TOS from '../../src/browser-index';
import { DataTransferType } from '../../src/interface';
import { deleteBucket, sleepCache, NEVER_TIMEOUT } from '../utils';
import {
  testBucketName,
  isNeedDeleteBucket,
  tosOptions,
} from '../utils/options';
import { initAutoGeneratedObjects, objectPath10M } from './utils';

initAutoGeneratedObjects();

describe('putObject data transfer in node.js environment', () => {
  beforeAll(async done => {
    const client = new TOS(tosOptions);
    // clear all bucket
    const { data: buckets } = await client.listBuckets();
    for (const bucket of buckets.Buckets) {
      if (isNeedDeleteBucket(bucket.Name)) {
        try {
          await deleteBucket(client, bucket.Name);
        } catch (err) {
          console.log('a: ', err);
        }
      }
    }
    // create bucket
    await client.createBucket({
      bucket: testBucketName,
    });
    await sleepCache();
    done();
  }, NEVER_TIMEOUT);
  // afterAll(async done => {
  //   const client = new TOS(tosOptions);
  //   console.log('delete bucket.....');
  //   // delete bucket
  //   deleteBucket(client, testBucketName);
  //   done();
  // }, NEVER_TIMEOUT);

  it(
    'put buffer',
    async () => {
      const size = 10 * 1024 * 1024;
      const buffer = Buffer.alloc(size, 'a');
      const client = new TOS(tosOptions);
      const progressFn = jest.fn();
      const dataTransferFn = jest.fn();
      await client.putObject({
        key: 'putObject-put-buffer-10M',
        body: buffer,
        dataTransferStatusChange: dataTransferFn,
        progress: progressFn,
      });
      expect(
        dataTransferFn.mock.calls[0][0].type === DataTransferType.Started
      ).toBe(true);
      expect(
        dataTransferFn.mock.calls[2][0].consumedBytes ===
          dataTransferFn.mock.calls[2][0].rwOnceBytes +
            dataTransferFn.mock.calls[1][0].consumedBytes
      ).toBe(true);

      const lastData =
        dataTransferFn.mock.calls[dataTransferFn.mock.calls.length - 2][0];
      expect(
        lastData.type === DataTransferType.Rw &&
          lastData.consumedBytes === lastData.totalBytes
      ).toBe(true);

      expect(
        dataTransferFn.mock.calls[dataTransferFn.mock.calls.length - 1][0]
          .type === DataTransferType.Succeed
      ).toBe(true);
    },
    NEVER_TIMEOUT
  );

  it(
    'putObjectFromFile',
    async () => {
      const client = new TOS(tosOptions);
      const progressFn = jest.fn();
      const dataTransferFn = jest.fn();
      await client.putObjectFromFile({
        key: 'putObjectFromFile-put-buffer-10M',
        filePath: objectPath10M,
        dataTransferStatusChange: dataTransferFn,
        progress: progressFn,
      });
      expect(
        dataTransferFn.mock.calls[0][0].type === DataTransferType.Started
      ).toBe(true);
      expect(
        dataTransferFn.mock.calls[2][0].consumedBytes ===
          dataTransferFn.mock.calls[2][0].rwOnceBytes +
            dataTransferFn.mock.calls[1][0].consumedBytes
      ).toBe(true);

      const lastData =
        dataTransferFn.mock.calls[dataTransferFn.mock.calls.length - 2][0];
      expect(
        lastData.type === DataTransferType.Rw &&
          lastData.consumedBytes === lastData.totalBytes
      ).toBe(true);

      expect(
        dataTransferFn.mock.calls[dataTransferFn.mock.calls.length - 1][0]
          .type === DataTransferType.Succeed
      ).toBe(true);
    },
    NEVER_TIMEOUT
  );
});
