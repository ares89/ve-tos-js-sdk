import path from 'path';
import fs from 'fs';
import { CRC } from '../../src/universal/crc';

export const assetsPath = path.resolve(__dirname, '../assets');
export const tmpDir = path.resolve(__dirname, 'tmp');
const autoGeneratedObjectsDir = path.resolve(tmpDir, 'auto-generated-objects');
export const objectKey1M = 'test-object-1M.txt';
export const objectPath1M = path.resolve(autoGeneratedObjectsDir, objectKey1M);
export const objectKey10M = 'test-object-10M.txt';
export const objectPath10M = path.resolve(
  autoGeneratedObjectsDir,
  objectKey10M
);
export const objectKey100M = 'test-object-100M.txt';
export const objectPath100M = path.resolve(
  autoGeneratedObjectsDir,
  objectKey100M
);
export const objectKey1K = 'test-object-1K.txt';
export const objectPath1K = path.resolve(autoGeneratedObjectsDir, objectKey1K);
export const objectKeyEmpty = 'test-object-empty.txt';
export const objectPathEmpty = path.resolve(
  autoGeneratedObjectsDir,
  objectKeyEmpty
);

// Exclusive file for each test case
export const exclusiveDir = path.resolve(tmpDir, 'exclusive') + '/';

export const checkpointsDir =
  path.resolve(tmpDir, 'auto-generated-checkpoints') + '/';
export const downloadFileDir = path.resolve(tmpDir, 'download-file') + '/';
function generateRandomString(length: number) {
  var result = '';
  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  var charactersLength = characters.length;
  for (var i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

export function initAutoGeneratedObjects() {
  fs.mkdirSync(autoGeneratedObjectsDir, { recursive: true });

  if (!fs.existsSync(objectPath1M)) {
    fs.writeFileSync(objectPath1M, generateRandomString(1 * 1024 * 1024));
  }
  if (!fs.existsSync(objectPath10M)) {
    fs.writeFileSync(objectPath10M, generateRandomString(10 * 1024 * 1024));
  }
  if (!fs.existsSync(objectPath100M)) {
    fs.writeFileSync(objectPath100M, generateRandomString(100 * 1024 * 1024));
  }
  if (!fs.existsSync(objectPath1K)) {
    fs.writeFileSync(objectPath1K, generateRandomString(1 * 1024));
  }
  if (!fs.existsSync(objectPathEmpty)) {
    fs.writeFileSync(objectPathEmpty, '');
  }
}

export function initCheckpointsDir() {
  if (fs.existsSync(checkpointsDir)) {
    fs.rmdirSync(checkpointsDir, { recursive: true });
  }
  fs.mkdirSync(checkpointsDir, { recursive: true });
}
export function initDownloadFileDir() {
  if (fs.existsSync(downloadFileDir)) {
    fs.rmdirSync(downloadFileDir, { recursive: true });
  }
  fs.mkdirSync(downloadFileDir, { recursive: true });
}
export function initExclusiveDir() {
  if (fs.existsSync(exclusiveDir)) {
    fs.rmdirSync(exclusiveDir, { recursive: true });
  }
  fs.mkdirSync(exclusiveDir, { recursive: true });
}

export async function calcFileCrc(filePath: string): Promise<string> {
  return new Promise((resolve, reject) => {
    const crcInst = new CRC();
    const stream = fs.createReadStream(filePath);
    stream.on('data', (d: Buffer) => crcInst.update(d));
    stream.on('error', (e) => reject(e));
    stream.on('end', () => resolve(crcInst.getCrc64()));
  });
}
