const execa = require('execa');
const fs = require('fs-extra');
const path = require('path');
const pkgJson = require('../package.json');
const { checkBrowserDist } = require('./checkBrowserDist');

const pwd = path.resolve(__dirname, '../');
async function build() {
  {
    // set version
    const version = pkgJson.version;
    const newContent = `// auto generated by scripts/build.js
export default '${version}';
`;
    fs.writeFileSync(
      path.resolve(__dirname, '../src/version.ts'),
      newContent,
      'utf-8'
    );
  }
  {
    console.log('exec:', 'yarn build:browser');
    const task = execa('yarn', ['build:browser'], { stdio: 'inherit' });
    await task;
  }

  // copy to browser
  console.log('copy dist to browser');
  const distDirPath = path.resolve(pwd, 'dist');
  const browserDirPath = path.resolve(pwd, 'browser');
  // for typescript definition of browser is different with node.js
  await fs.move(
    path.resolve(distDirPath, 'browser-index.d.ts'),
    path.resolve(distDirPath, 'index.d.ts'),
    { overwrite: true }
  );
  await fs.rm(browserDirPath, { recursive: true, force: true });
  await fs.mkdir(browserDirPath, { recursive: true });
  await fs.copy(distDirPath, browserDirPath, { overwrite: true });
  await checkBrowserDist();

  {
    console.log('exec:', 'yarn build:node');
    const task = execa('yarn', ['build:node'], { stdio: 'inherit' });
    await task;
  }

  {
    console.log('exec:', 'yarn build:proxy');
    const task = execa('yarn', ['build:proxy'], { stdio: 'inherit' });
    await task;

    const proxyFilesDir = path.resolve(__dirname, '../out/');

    await fs.copy(proxyFilesDir, `${browserDirPath}`, {
      overwrite: true,
    });
    await fs.copy(proxyFilesDir, `${distDirPath}`, {
      overwrite: true,
    });
    await fs.rm(proxyFilesDir, { recursive: true, force: true });
  }
}

async function main() {
  try {
    await build();
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

main();
